// ุงููุชุบูุฑ ุงูุฐู ุณูุฎุฒู ุฌููุน ุงูุฃุณุฆูุฉ ุจุนุฏ ุชุญููููุง
let allQuestions = [];
let userAnswers = {}; // ูุชุฎุฒูู ุฅุฌุงุจุงุช ุงููุณุชุฎุฏููู: {questionIndex: selectedOptionIndex}
let currentScore = 0;
let totalQuestions = 0;
let answeredCount = 0;

// ุงูุนูุงุตุฑ ุงูุฑุฆูุณูุฉ ูู DOM
const container = document.getElementById('quiz-container');
const scoreDisplay = document.getElementById('score-display');
const progressBar = document.getElementById('progress-bar');
const progressDisplay = document.getElementById('progress-display');
const submitButton = document.getElementById('submit-btn');
const finalResultsDiv = document.getElementById('final-results');


// ุฏุงูุฉ ูุชุญููู ุงูุฃุณุฆูุฉ ูู ููู questions.json
async function loadQuestions() {
    try {
        const response = await fetch('questions.json');
        const data = await response.json();
        
        allQuestions = []; // ูุณุญ ุงูุฃุณุฆูุฉ ุงููุฏููุฉ
        
        // ุชุฌููุน ุฌููุน ุงูุฃุณุฆูุฉ ูู ุฌููุน ุงูุฃูุณุงู
        data.forEach(section => {
            section.questions.forEach(question => {
                question.sectionTitle = section.section;
                allQuestions.push(question);
            });
        });

        totalQuestions = allQuestions.length;
        displayQuestions();
        updateStatus();
    } catch (error) {
        console.error('ุฎุทุฃ ูู ุชุญููู ููู ุงูุฃุณุฆูุฉ:', error);
        container.innerHTML = '<p style="color:var(--danger-color); text-align:center;">ุชุนุฐุฑ ุชุญููู ุงูุฃุณุฆูุฉ. ุชุฃูุฏ ูู ูุฌูุฏ ููู questions.json</p>';
        submitButton.disabled = true;
    }
}

// ุฏุงูุฉ ูุนุฑุถ ุงูุฃุณุฆูุฉ ูู ุตูุญุฉ HTML
function displayQuestions() {
    container.innerHTML = '';
    let currentSection = '';

    allQuestions.forEach((q, questionIndex) => {
        // ุนุฑุถ ุนููุงู ุงููุณู
        if (q.sectionTitle !== currentSection) {
            container.innerHTML += `<h2 class="section-title">${q.sectionTitle}</h2>`;
            currentSection = q.sectionTitle;
        }

        let questionHTML = `
            <div class="question-card" data-question-index="${questionIndex}">
                <p class="question-text">ุณุคุงู ${questionIndex + 1}: ${q.question}</p>
                <div class="options-container">
        `;

        // ุนุฑุถ ุฎูุงุฑุงุช ุงูุฅุฌุงุจุฉ
        q.options.forEach((option, optionIndex) => {
            const radioName = `q${questionIndex}`;
            const inputId = `q${questionIndex}o${optionIndex}`;
            
            questionHTML += `
                <label for="${inputId}" class="option-label">
                    <input type="radio" id="${inputId}" name="${radioName}" value="${optionIndex}" onclick="handleAnswer(${questionIndex}, ${optionIndex})">
                    ${option}
                </label>
            `;
        });

        questionHTML += `
                </div>
            </div>
        `;
        container.innerHTML += questionHTML;
    });
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุดุฑูุท ุงูุชูุฏู ูุงููุชูุฌุฉ ุงูููุฑูุฉ
function updateStatus() {
    scoreDisplay.textContent = `ุงูููุงุท: ${currentScore} / ${answeredCount}`;
    
    // ุชุญุฏูุซ ุงูุชูุฏู ุงูุนุงู (ูู ุณุคุงู ุชู ุงูุฅุฌุงุจุฉ ุนููู)
    const progress = totalQuestions > 0 ? (answeredCount / totalQuestions) * 100 : 0;
    progressBar.style.width = `${progress}%`;
    progressDisplay.textContent = `ุงูุชูุฏู: ${answeredCount} ูู ${totalQuestions}`;
}

// ุฏุงูุฉ ููุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงูุฅุฌุงุจุฉ (ุชูุงุนูู)
window.handleAnswer = function(questionIndex, selectedOptionIndex) {
    const questionData = allQuestions[questionIndex];
    const card = document.querySelector(`.question-card[data-question-index="${questionIndex}"]`);
    const isAlreadyAnswered = userAnswers.hasOwnProperty(questionIndex);
    
    // ุชุญุฏูุซ ุงูุฅุฌุงุจุฉ ูู ุณุฌู ุงููุณุชุฎุฏู
    userAnswers[questionIndex] = selectedOptionIndex;

    // ุชุญุฏูุซ ุนุฏุงุฏ ุงูุฅุฌุงุจุงุช ุงูููุฌุฒุฉ ููุท ุฅุฐุง ูุงู ูุฐุง ุฃูู ุงุฎุชูุงุฑ ููุฐุง ุงูุณุคุงู
    if (!isAlreadyAnswered) {
        answeredCount++;
        card.classList.add('answered');
    }
    
    // ุชุญุฏูุซ ุงูููุงุท ุงูููุฑูุฉ: ุฅุนุงุฏุฉ ุงุญุชุณุงุจ ุงูููุงุท
    currentScore = 0;
    Object.keys(userAnswers).forEach(idx => {
        const q = allQuestions[idx];
        if (userAnswers[idx] === q.correct) {
            currentScore++;
        }
    });

    updateStatus();
};

// ุฏุงูุฉ ููุนุงูุฌุฉ ุฅุฑุณุงู ุงูุงุฎุชุจุงุฑ ูุนุฑุถ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
window.submitQuiz = function() {
    let finalScore = 0;
    
    // ุงูุชุฃูุฏ ูู ุฃู ุฌููุน ุงูุฃุณุฆูุฉ ูุฏ ุชู ุนุฑุถูุง ูุญุณุงุจูุง
    allQuestions.forEach((q, questionIndex) => {
        const card = document.querySelector(`.question-card[data-question-index="${questionIndex}"]`);
        const userSelected = userAnswers[questionIndex];
        const optionsLabels = card.querySelectorAll('.option-label');
        
        // ุชุนุทูู ุงูุฒุฑ ูููุน ุฅุนุงุฏุฉ ุงูุฅุฑุณุงู
        submitButton.disabled = true;

        // ุฅุฒุงูุฉ ุงููุฆุงุช ุงููุฏููุฉ ูุจู ุงูุชุตุญูุญ
        optionsLabels.forEach(label => label.classList.remove('correct-answer', 'wrong-answer', 'user-selected-wrong', 'user-selected-correct'));
        
        // ุชุญุฏูุฏ ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ููุถุน ุนูุงูุฉ ุนูููุง
        const correctAnswerLabel = optionsLabels[q.correct];
        correctAnswerLabel.classList.add('correct-answer');

        if (userSelected !== undefined) {
            const userSelectedLabel = optionsLabels[userSelected];
            
            if (userSelected === q.correct) {
                // ุงูุฅุฌุงุจุฉ ุตุญูุญุฉ
                finalScore++;
                userSelectedLabel.classList.add('user-selected-correct');
            } else {
                // ุงูุฅุฌุงุจุฉ ุฎุงุทุฆุฉ
                userSelectedLabel.classList.add('wrong-answer', 'user-selected-wrong');
            }
        }
        
        // ุชุนุทูู ุฌููุน ุงูุฎูุงุฑุงุช ูููุน ุงูุชุบููุฑ ุจุนุฏ ุงูุฅุฑุณุงู
        card.querySelectorAll('input[type="radio"]').forEach(input => input.disabled = true);
    });

    // ุนุฑุถ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
    finalResultsDiv.style.display = 'block';
    const percentage = ((finalScore / totalQuestions) * 100).toFixed(2);
    
    let message = '';
    if (percentage >= 80) {
        message = 'ููุชุงุฒ! ูุณุชูู ูุนุฑูุฉ ุฌููููุฌูุฉ ุนุงูู. ๐';
    } else if (percentage >= 60) {
        message = 'ุฌูุฏ ุฌุฏุงู! ูุฏูู ุฃุณุงุณ ูุชูู ูู ุงูุฌููููุฌูุง. โฐ๏ธ';
    } else {
        message = 'ุชุญุชุงุฌ ุฅูู ูุฑุงุฌุนุฉ ุจุนุถ ุงูููุงููู ุงูุฌููููุฌูุฉ. ๐';
    }
    
    finalResultsDiv.innerHTML = `
        <h3>๐ ูุชูุฌุฉ ุงูุงุฎุชุจุงุฑ ุงูููุงุฆูุฉ ๐</h3>
        <p>ุงูููุงุท ุงููุญุชุณุจุฉ: <span style="color: var(--success-color);">${finalScore}</span> ูู ุฃุตู ${totalQuestions} ุณุคุงู.</p>
        <p>ูุณุจุฉ ุงููุฌุงุญ: <span style="color: var(--primary-color);">${percentage}%</span></p>
        <p style="margin-top: 20px;">${message}</p>
        <p>ุชู ุชุธููู ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ุจุงูููู ุงูุฃุฎุถุฑ.</p>
    `;
    
    // ุงูุชูุฑูุฑ ุฅูู ูุณู ุงููุชุงุฆุฌ
    finalResultsDiv.scrollIntoView({ behavior: 'smooth' });
}

// ุชุดุบูู ุฏุงูุฉ ุชุญููู ุงูุฃุณุฆูุฉ ุนูุฏ ุชุญููู ุงูุตูุญุฉ
window.onload = loadQuestions;
